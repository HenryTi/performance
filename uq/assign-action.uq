QUERY GetAssigns(
	group ID,			-- if group=0, then my
	end TINYINT,
)
RETURNS ret (
	assign ID Assign,
	end TINYINT,
) {
	IF group IS NULL OR group=0 {
		SET group=a.group FROM Me as a WHERE a.me=$user;
	}
	INTO ret SELECT a.assign, a.[end]
		FROM AssignEx as a
		WHERE a.group=[group] AND (end IS NULL OR a.[end]=end)
		ORDER BY a.assign DESC;
};

ACTION CreateAssign ver 1.0 (
	group ID,
	caption CHAR(200),
) RETURNS ret (
	id ID,
) {
	var assignId ID;
	TUID Assign INTO assignId SET caption=caption, owner=$user;
	IF group IS NULL or group=0 {
		SET group=a.group FROM Me as a WHERE a.me=$user;
		IF group IS NULL {
			TUID Group into group SET name='$', owner=$user, parent=0;
			BOOK MyGroup AT($user, group) SET time=$date;
			BOOK Me AT($user) SET group=group;
		}
	}
	BOOK AssignEx at(assignId) SET group=group;
	INTO ret SELECT assignId as id;
};

ACTION CreateAndSendAssign (
	group ID,
	caption CHAR(200),
) RETURNS ret (
	id ID,
) {
	var assignId ID;
	VAR taskId ID, seq TINYINT;
	TUID Assign INTO assignId SET caption=caption, owner=$user;
	IF group IS NULL or group=0 {
		SET group=a.group FROM Me as a WHERE a.me=$user;
		IF group IS NULL {
			TUID Group into group SET name='$', owner=$user, parent=0;
			BOOK MyGroup AT($user, group) SET time=$date;
			BOOK Me AT($user) SET group=group;
		}
	}
	BOOK AssignEx at(assignId) SET group=group;

	BOOK AssignTo AT(assignId, $user);
	TUID Task INTO taskId SET assign=assignId, worker=$user;
	BOOK TaskState AT(taskId) SET state=0;
	SET seq = IFNULL((SELECT max(seq) FROM TaskFlow WHERE task=taskId), 0) + 1;
	BOOK TaskFlow AT(taskId, seq) SET user=$user, state=0;

	INTO ret SELECT assignId as id;
};


-- only for my assign
ACTION DoneAssign ver 1.8 (
	assign ID,	
	point INT,
	comment TEXT,
)
RETURNS ret (
	end TINYINT,
) {
	var taskId ID, ownerId ID, act TINYINT, state TINYINT;

	SET act = EnumTaskAct.done;
	SET state = EnumTaskState.done;
	SET taskId=a.id
		FROM Task as a WHERE a.assign=assign AND a.worker=$user;
	SET ownerId=a.owner
		FROM Assign as a WHERE a.id=assign;
	IF taskId IS NULL AND $user=ownerId {
		TUID Task into taskId SET assign=assign, worker=$user;
	}
	ELSE {
		SET assign = 0;
	}
	PROC ProcessTask(taskId, act, state);
	BOOK TaskState at(taskId) Set pointDone=point;
};

ACTION DoneTask ver 1.8 (
	task ID,	
	point INT,
	comment TEXT,
)
RETURNS ret (
	end TINYINT,
) {
	IF exists (SELECT a.id FROM Task as a WHERE a.worker=$user) {
		VAR act TINYINT, state TINYINT;
		SET act = EnumTaskAct.done;
		SET state = EnumTaskState.done;
		PROC ProcessTask(task, act, state);
		BOOK TaskState at(task) Set pointDone=point;
	}
};

ACTION PassTask ver 1.8 (
	task ID,
	point INT,
	comment TEXT,
)
RETURNS ret (
	end TINYINT,
) {
	IF exists(SELECT a.id FROM Task as a JOIN Assign as b on a.assign=b.id WHERE b.checker=$user) {
		VAR act TINYINT, state TINYINT;
		SET act = EnumTaskAct.check;
		SET state = EnumTaskState.pass;
		PROC ProcessTask(task, act, state);
	}
};

ACTION FailTask ver 1.8 (
	task ID,	
	comment TEXT,
)
RETURNS ret (
	end TINYINT,
) {
	IF exists(SELECT a.id FROM Task as a JOIN Assign as b on a.assign=b.id WHERE b.checker=$user) {
		VAR act TINYINT, state TINYINT;
		SET act = EnumTaskAct.check;
		SET state = EnumTaskState.fail;
		PROC ProcessTask(task, act, state);
	}
};

ACTION RateTask ver 1.8 (
	task ID,
	point INT,
	comment TEXT,
)
RETURNS ret (
	end TINYINT,
) {
	IF exists(SELECT a.id FROM Task as a JOIN Assign as b on a.assign=b.id WHERE b.rater=$user) {
		VAR act TINYINT, state TINYINT;
		SET act = EnumTaskAct.rate;
		SET state = EnumTaskState.rated;
		PROC ProcessTask(task, act, state);
	}
};

PROC ProcessTask ver 1.0 (
	taskId ID,
	act TINYINT,
	state TINYINT,
)
RETURNS ret (
	end TINYINT,
) {
	var assign ID, ownerId ID, checkerId ID, raterId ID, groupId ID
		, seq TINYINT, taskEnd TINYINT, assignEnd TINYINT;

	SET assign=a.assign FROM Task as a WHERE a.id=taskId;
	SET ownerId=a.owner, checkerId=a.checker, raterId=a.rater
		FROM Assign as a WHERE a.id=assign;
	SET groupId=a.group FROM AssignEx as a WHERE a.assign=assign;
	IF assign > 0 {
		-- 设置任务结束标志
		SET taskEnd = 1;
		IF state=EnumTaskState.done {
			IF NOT checkerId IS NULL {
				SET taskEnd=0;
			}
			ELSEIF NOT raterId IS NULL {
				SET taskEnd=0;
			}
		}
		ELSEIF state=EnumTaskState.pass {
			IF NOT raterId IS NULL {
				BOOK Me at(raterId) SET tickTodo=$date;
				SET taskEnd=0;
			}
		}
		ELSEIF state=EnumTaskState.start OR state=EnumTaskState.todo OR state=EnumTaskState.doing {
			SET taskEnd = 0;
		}

		-- 提醒组成员变化
		FOREACH (VAR memberId INT OF SELECT a.member as memberId FROM GroupMember as a WHERE a.group=groupId) {
			BOOK Me at(memberId) SET tickTodo=$date;
		}

		BOOK TaskState at(taskId) Set state=state, end=taskEnd;
		SET seq = IFNULL((SELECT max(seq) FROM TaskFlow WHERE task=taskId), 0) + 1;
		BOOK TaskFlow at(taskId, seq) SET user=$user, act=act, state=state;

		-- 设置assign end标志
		IF EXISTS(SELECT a.id FROM Task as a JOIN TaskState as b ON a.id=b.task WHERE a.assign=assign AND b.end=0) {
			SET assignEnd=0;
		}
		else {
			SET assignEnd=1;
		}
		BOOK AssignEx at(assign) SET end=assignEnd;
	}
	INTO ret SELECT assignEnd as end;
};

ACTION SendAssign ver 1.2 (
	assignId ID,
	checkerId ID,
	raterId ID,
	ARR toList (
		to ID
	)
) {
	IF exists(SELECT id FROM Assign WHERE id=assignId AND owner=$user) {
		TUID Assign ID assignId SET checker=checkerId, rater=raterId;
		FOREACH toList {
			VAR taskId ID, seq TINYINT;
			BOOK AssignTo AT(assignId, to);
			TUID Task INTO taskId SET assign=assignId, worker=to;
			BOOK TaskState AT(taskId) SET state=0;
			SET seq = IFNULL((SELECT max(seq) FROM TaskFlow WHERE task=taskId), 0) + 1;
			BOOK TaskFlow AT(taskId, seq) SET user=$user, state=0;
			FOREACH (VAR itemId ID OF SELECT a.id as itemId FROM AssignItem as a WHERE a.assign=assignId) {
				VAR todoId ID;
        		TUID Todo INTO todoId SET task=taskId, assignItem=itemId;
			}
		}
	}
};

